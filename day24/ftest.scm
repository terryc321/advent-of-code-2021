
;;(import (lsp-server))

(import scheme)
(import (chicken process-context))
(import (chicken io))
(import (chicken format))

(import (chicken sort))
(import (chicken string))
(import (chicken pretty-print))
(import (chicken random))
(import (chicken time))
(import (chicken repl))
(import procedural-macros)
(import regex)
;;(import srfi-89)
;;(import srfi-89)
;; missing srfi-89 compatibility no egg for it ??
;;(define pp pretty-print)
;;(import (chicken doc))
;; documentation
;; debugging macro expander
;; debugger
(import simple-md5)
(import srfi-13)
;;srfi-13 for string=
(import srfi-69)
;; hash-table-ref  hash key thunk
;; hash-table-set! hash key val
;; sudo chicken-install srfi-178
(import srfi-178)
;; srfi-178 provides bit-vectors
;; (import-for-syntax
;;   (only checks <<)
;;   (only bindings bind bind-case)
;;   (only procedural-macros macro-rules with-renamed-symbols once-only))
(import sequences)
(import srfi-1)
(import matchable)
(import simple-loops)
;; do-list
(import vector-lib)
;; vector-copy

#|
(current-directory)
(change-directory "day24")
|#

(define (1- x) (- x 1))
(define (1+ x) (+ x 1))

;;===============================================================================
(define (div x y) (floor (/ x y)))
(define (mod x y) (modulo x y))
(define (mul x y) (* x y))
(define (eql x y) (if (= x y) 1 0))
(define (add x y) (+ x y))

;;================================================================================

;; fast expects a vector
;; (time (fast (list->vector (num->ilist 12345678912345))))
;; (time (exec '((x 0)(y 0)(w 0)(z 0)) (num->ilist 12345678912345) input))
(define (fast-z vv)
  (when (not (= (vector-length vv) 14))
    (format #t "fast-z expects a vector of length 14 , only given ~a ~%given => [~a]" (vector-length vv) vv))
  
  (let ((x 0)
	(y 0)
	(w 0)
	(z 0)
	(n1 (vector-ref vv 0))
	(n2 (vector-ref vv 1))
	(n3 (vector-ref vv 2))
	(n4 (vector-ref vv 3))
	(n5 (vector-ref vv 4))
	(n6 (vector-ref vv 5))
	(n7 (vector-ref vv 6))
	(n8 (vector-ref vv 7))
	(n9 (vector-ref vv 8))
	(n10 (vector-ref vv 9))
	(n11 (vector-ref vv 10))
	(n12 (vector-ref vv 11))
	(n13 (vector-ref vv 12))
	(n14 (vector-ref vv 13))
	)
    
    (set! w n1)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 10))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 1))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n2)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 11))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 9))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n3)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 14))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 12))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n4)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 13))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 6))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n5)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -6))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 9))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n6)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -14))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 15))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n7)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 14))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 7))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n8)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 13))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 12))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n9)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -8))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 15))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n10)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -15))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 3))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n11)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 10))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 6))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n12)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -11))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 2))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n13)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -13))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 10))
    (set! y (mul y x))
    (set! z (add z y))
    (set! w n14)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -4))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 12))
    (set! y (mul y x))
    (set! z (add z y))
    z))


(define (ftest1 z n1)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n1)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 10))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 1))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z))
      (assert (= z (+ n1 1)))
      z)))


(define (ftest2 z n2)
  (let* ((n1 (- z 1)) (w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n2) ;;
    (set! x (mul x 0)) ;; x = 0
    (set! x (add x z)) ;; x = 0 + z
    (set! x (mod x 26)) ;; x = mod z 26
    (set! z (div z 1))  ;; z = div z 1   ,,, nop 
    (set! x (add x 11))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 9))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z))
      (assert (= zout (+ n2 (* 26 n1) 35)))
      zout)))


(define (ftest3 z n3)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n3)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 14))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 12))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z))
      zout)))

(define (ftest4 z n4)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n4)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 13))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 6))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z))
      zout)))


(define (ftest5 z n5)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n5)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -6))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 9))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z))
      zout)))


(define (ftest6 z n6)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n6)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -14))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 15))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))



(define (ftest7 z n7)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n7)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 14))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 7))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))

(define (ftest8 z n8)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n8)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 13))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 12))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))


(define (ftest9 z n9)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n9)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -8))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 15))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))

(define (ftest10 z n10)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n10)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -15))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 3))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))


(define (ftest11 z n11)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n11)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 1))
    (set! x (add x 10))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 6))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))


(define (ftest12 z n12)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n12)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -11))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 2))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))


(define (ftest13 z n13)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n13)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26))
    (set! z (div z 26))
    (set! x (add x -13))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 10))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z)) z)))


(define (ftest14 z n14)
  (let* ((w 0) (x 0) (y 0) (win w) (xin x) (yin y) (zin z))
    (set! w n14)
    (set! x (mul x 0))
    (set! x (add x z))
    (set! x (mod x 26)) ;; (mod z 26)  = n14 + 4         n14 { 1..9}  {5 .. 13} = z mod 26
    (set! z (div z 26))
    (set! x (add x -4))
    (set! x (eql x w))
    (set! x (eql x 0))
    (set! y (mul y 0))
    (set! y (add y 25))
    (set! y (mul y x))
    (set! y (add y 1))
    (set! z (mul z y))
    (set! y (mul y 0))
    (set! y (add y w))
    (set! y (add y 12))
    (set! y (mul y x))
    (set! z (add z y))
    (let* ((wout w) (xout x) (yout y) (zout z))
      (or (assert (or (= zout (div zin 26))
		      (= zout (+ n14 12 (* 26 (div zin 26))))))
	  (error "missing something!"))
      zout)))


